<?xml version="1.0" encoding="UTF-8"?>
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:aop="http://www.springframework.org/schema/aop"    
    xmlns:mvc="http://www.springframework.org/schema/mvc"    
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
    
    <!--  扫描指定的包中的类上的注解，常用的注解有：
		@Controller 声明Action组件
		@Service    声明Service组件    @Service("myMovieLister")
		@Repository 声明Dao组件
		@Component   泛指组件, 当不好归类时.
		@RequestMapping("/menu")  请求映射
		@Resource  用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName")
		@Autowired 用于注入，(srping提供的) 默认按类型装配
		@Transactional( rollbackFor={Exception.class}) 事务管理
		@ResponseBody
		@Scope("prototype")   设定bean的作用域 -->
    
   <!-- 要使用spring的注解就要加这个  -->
   <context:annotation-config/>
   <!-- ===================================引入属性文件     start===========================================-->
	<context:property-placeholder location="classpath:config.properties" />
   <!-- 当配置用到占位符时   点位符的值去  下面的配置指定的文件里去找 -->
   <bean  id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="1" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
   
   <!-- ===================================引入属性文件     end===========================================-->
   	<!-- 自动扫描所有有注解的类加入bean的包名 -->  
 	<context:component-scan base-package="com" />
 	
 	<!-- 要用注解的方式加动态代理  就要加这配置 -->
 	 <aop:aspectj-autoproxy/>   
 	 
 	 <bean id="aopSpringByXml" class="com.proxy.AopSpringByXml"></bean>
 	 <aop:config>
 	 	<!-- <aop:advisor advice-ref=""/>   这个定义多个切面  还需更深入理解  -->
 	 	<aop:pointcut expression="execution(public * com.service..*.*(..))" id="servicePointCut"/>
 	 	
 	 	<aop:aspect id="aopByXml"  ref="aopSpringByXml"><!-- 这个定义了多个切点（形成一个切面） -->
 	 		<aop:before  pointcut-ref="servicePointCut" method="before"/>
 	 		<aop:after  pointcut="execution(public * com.service..*.*(..))" method="after"/>
 	 		<aop:around  pointcut-ref="servicePointCut" method="around"/>
 	 	</aop:aspect>
 	 
 	 </aop:config>
   
   
   <!-- 默认的注解映射的支持（简写）  自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean   可删除-->  
   <!--  DefaultAnnotationHandlerMapping  通过注解，把一个URL映射到Controller类上 -->
   <!--  AnnotationMethodHandlerAdapter 通过注解，把一个URL映射到Controller类的方法上 -->
      <!--  <mvc:annotation-driven />  -->
   
   
	 <!-- 视图解释类 
	 		 也可以用 class="org.springframework.web.servlet.view.UrlBasedViewResolver"
	 		 InternalResourceViewResolver 比  UrlBasedViewResolver  多了JSTL的支持
	  -->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->  
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
    </bean>  
    
    
    <!-- 拦截器 会为每一个HandlerMapping，注入一个拦截器。其实我们也可以手动配置为每个HandlerMapping注入一个拦截器 -->  
    <mvc:interceptors>  
        <bean class="com.interceptors.FirstInterceptor" />
    </mvc:interceptors>    
       
    <!-- 对静态资源文件的访问  方案一 使用默认的Servlet来响应静态文件   （二选一） -->
  <!--   <mvc:default-servlet-handler/> -->
      
    <!-- 对静态资源文件的访问  方案二 （二选一）-->  
<!--     <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>  
    <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>  
    <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>   -->
    
    
    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->  
    <bean class="com.context.SpringContextHolder" lazy-init="false"></bean>
    
    
    <!-- ===============================================以下的较少使用============================================================= -->
    <!-- 全局异常处理-->  
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
	    <property name="defaultErrorView">    
	        <value>/error/error</value>  <!-- 错误页面 -->
	    </property>  
	    <property name="defaultStatusCode">    
	        <value>500</value>  
	    </property>     
		<property name="warnLogCategory">    
	        <value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>  
	    </property>     
	</bean>  
    
    <import resource="spring-mybatis.xml"/>
</beans>